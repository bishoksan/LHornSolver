:-module(_,[main/1,main_gx/1]).
mnf(X) :-
        if(X,true,(add_error(runtime_checks,[67,97,108,108,32,102,97,105,108,101,100,58,32,126,119,126,110],[X]),fail)).
pp_mnf(X) :-
        add_postfix_to_pred(X,'_pre',Pre),
        (   Pre ->
            true
        ;   add_error(runtime_checks,[80,114,101,32,67,111,110,100,105,116,105,111,110,32,102,97,105,108,101,100,58,32,126,119,126,110],[Pre])
        ),
        mnf(X),
        add_postfix_to_pred(X,'_post',Post),
        (   Post ->
            true
        ;   add_error(runtime_checks,[80,111,115,116,32,67,111,110,100,105,116,105,111,110,32,102,97,105,108,101,100,58,32,126,119,126,110],[Post])
        ).
add_postfix_to_pred($:(Call),Extension,$:(Post)) :- !,
        add_postfix_to_pred(Call,Extension,Post).
add_postfix_to_pred(Call,Extension,PostCall) :-
        Call=..[F|Args],
        atom_concat(F,Extension,PostF),
        PostCall=..[PostF|Args].
:- dynamic
        logged_error/2.
:- dynamic
        verbosity_level/1.
set_verbosity_level(NewLevel,OldLevel) :-
        verbosity_level(OldLevel),
        retract(verbosity_level(OldLevel)),
        assert(verbosity_level(NewLevel)).
verbosity_level(1).
message_stream(user_error).
error_stream(user_error).
reset_errors :-
        retractall(logged_error(_,_)).
reset_errors_from_source(Source) :-
        retractall(logged_error(Source,_)).
add_exception(Source,ErrFormat,ErrArgs,Exception) :-
        parse_exception(Exception,FmtS,FmtArgs),
        append(ErrFormat,FmtS,FormatString),
        append(ErrArgs,FmtArgs,FormatArgs),
        add_error(Source,FormatString,FormatArgs).
add_error(Source,ErrFormat,ErrArgs) :-
        error_stream(ErrS),
        format(ErrS,[126,78,32,33,32,65,110,32,101,114,114,111,114,32,111,99,99,117,114,114,101,100,126,110,33,32],[]),
        format(ErrS,ErrFormat,ErrArgs),
        format(ErrS,[126,78],[]),
        flush_output(ErrS),
        assertz(logged_error(Source,ErrFormat-ErrArgs)).
add_message(_Source,Level,Msg,Args) :-
        verbosity_level(C),
        Level=<C, !,
        print_log_message(Msg,Args).
add_message(_,_,_,_) :- !.
print_log_message(Msg,Args) :-
        message_stream(Str),
        format(Str,[126,78,32,37,32],[]),
        format(Str,Msg,Args),
        format(Str,[126,78],[]),
        flush_output(Str).
get_error(Source,ErrMsg) :-
        retract(logged_error(Source,ErrMsg)).
get_all_errors(All) :-
        findall(Err,get_error(_Source,Err),All),
        \+All=[].
test_error_occured(Source) :-
        logged_error(Source,_), !.
count_errors_occured(NrOfErrors) :-
        count_errors_occured_with_source(_,NrOfErrors).
count_errors_occured_with_source(Source,NrOfErrors) :-
        findall(1,logged_error(Source,_),Ls),
        length(Ls,NrOfErrors).
parse_exception(error(syntax_error(P1,P2,Msg,Tokens),_Pred),FmtString,FmtArgs) :-
        token_format_string(Tokens,ErrString),
        append([83,89,78,84,65,88,32,69,82,82,79,82,58,32,40,108,105,110,101,115,32,126,119,45,126,119,41,32,126,119,126,110],ErrString,FmtString),
        append([P1,P2,Msg],Tokens,FmtArgs), !.
parse_exception(error(existence_error(source_sink,Filename),_Pred),[85,110,97,98,108,101,32,116,111,32,111,112,101,110,32,102,105,108,101,58,32,126,119],[Filename]) :- !.
parse_exception(E,[126,119],[E]).
token_format_string([],[]).
token_format_string([_T|Ts],[126,119,32|ErrStr]) :-
        token_format_string(Ts,ErrStr).
is_list_skel(X) :-
        nonvar(X),
        (   X=[] ->
            true
        ;   X=[_|T],
            is_list_skel(T)
        ).
:-op(1150,fx,filter).
:-op(1150,fx,type).
:-op(500,xfx,--->).
:-use_module(library(terms_vars)).
flatten(X,Res) :-
        var(X), !,
        Res=X.
flatten((X,Y),Res) :- !,
        flatten(X,FX),
        (   FX==fail ->
            Res=fail
        ;   flatten(Y,FY),
            (   FX==true ->
                Res=FY
            ;   FY==true ->
                Res=FX
            ;   Res=(FX,FY)
            )
        ).
flatten((LHS;E),Res) :-
        nonvar(LHS),
        LHS=(I->T), !,
        flatten(I,FI),
        (   FI==fail ->
            flatten(E,Res)
        ;   FI==true ->
            flatten(T,Res)
        ;   Res=(FI->FT;FE),
            flatten(T,FT),
            flatten(E,FE)
        ).
flatten(call(X),X) :-
        nonvar(X), !.
flatten((L;R),Disj) :- !,
        flatten(L,FL),
        flatten(R,FR),
        (   FL=true ->
            Disj=FR
        ;   FR=true ->
            Disj=FL
        ;   Disj=(FL;FR)
        ).
flatten(\+X,\+Y) :-
        flatten(X,Y), !.
flatten(when(C,Call),when(C,FCall)) :-
        flatten(Call,FCall), !.
flatten(X,X).
portray_message(informational,_).
:-use_module(library(lists)).
:- dynamic
        gx_data/2.
generalise_call(Filters,Call,GenCall) :-
        Call=..[F|Args],
        gen_filters_list(Filters,Args,GArgs,_,_,_),
        safe_eqdotdot(GenCall,F,GArgs).
safe_eqdotdot(G,F,A) :-
        (   G=..[F|A] ->
            true
        ;   format(user_error,[67,111,117,108,100,32,110,111,116,32,103,101,110,101,114,97,116,101,32,115,116,114,117,99,116,117,114,101,58,32,126,119,61,46,46,91,126,119,124,126,119,93,126,110],[G,F,A]),
            halt(1)
        ).
filter_call(Filters,Call,GCall,FCall) :-
        Call=..[F|Args],
        safe_eqdotdot(GCall,F,GArgs),
        gen_filters_list(Filters,Args,GArgs,FArgs,_,_),
        gensym(F,NewF),
        generate_filter_call(NewF,FArgs,FCall).
generalise_and_filter(Filters,Call,GenCall,FCall) :-
        Call=..[F|Args],
        gen_filters_list(Filters,Args,GenArgs,FilArgs,_,_),
        safe_eqdotdot(GenCall,F,GenArgs),
        gensym(F,NewF),
        generate_filter_call(NewF,FilArgs,FCall).
generate_filter_call(NewF,FilArgs,FCall) :-
        (   FCall=..[NewF|FilArgs] ->
            true
        ;   trunc_arglist(FilArgs,253,NewArgs),
            safe_eqdotdot(FCall,NewF,NewArgs)
        ).
trunc_arglist([],_,[]) :- !.
trunc_arglist([H|T],Rem,Res) :-
        (   Rem>0 ->
            Res=[H|RR],
            R1 is Rem-1,
            trunc_arglist(T,R1,RR)
        ;   Res=[rem([H|T])]
        ).
gen_filters_list(FilterList,Args,GArgs1,FArgs1,OnlineArgs1,OnlineMap1) :-
        member(Filter,FilterList),
        l_gen_fil(Filter,Args,[],GArgs,[],FArgs,[],OnlineArgs,[],OnlineMap),
        reverse(GArgs,GArgs1),
        reverse(FArgs,FArgs1),
        reverse(OnlineArgs,OnlineArgs1),
        reverse(OnlineMap,OnlineMap1), !.
get_uncovered_correction([Filter],Call,InvalidArgs) :-
        Call=..[_F|Args],
        l_get_uncovered_correction(Filter,Args,1,InvalidArgs).
l_get_uncovered_correction([],[],_Nr,[]).
l_get_uncovered_correction([Type|Types],[A|Args],Nr,InvalidArgs) :-
        (   gen_fil(Type,A,_,_,_,_,_,_,_,_) ->
            InvalidArgs=IA
        ;   InvalidArgs=[make_dynamic(Nr)|IA]
        ),
        N1 is Nr+1,
        l_get_uncovered_correction(Types,Args,N1,IA).
l_gen_fil([],[],G,G,F,F,OA,OA,OM,OM).
l_gen_fil([Type|Types],[A|Args],GArgsIn,GArgsOut,FArgsIn,FArgsOut,OIn,OOut,OMIn,OMOut) :-
        gen_fil(Type,A,GArgsIn,GArgsOut1,FArgsIn,FArgsOut1,OIn,OOut1,OMIn,OMOut1),
        l_gen_fil(Types,Args,GArgsOut1,GArgsOut,FArgsOut1,FArgsOut,OOut1,OOut,OMOut1,OMOut).
l_gen_fil(X,_,_,_,_,_,_,_,_,_) :-
        \+X=[],
        \+X=[_|_],
        format(user,[42,42,42,32,73,108,108,101,103,97,108,32,102,105,108,116,101,114,32,105,110,32,108,95,103,101,110,95,102,105,108,59,32,110,111,116,32,97,32,108,105,115,116,58,32,126,119,46,126,110],[X]),
        fail.
gen_fil(static,A,G,[A|G],F,F,O,O,OM,OM) :-
        ground(A).
gen_fil(static_nf,A,G,[A|G],F,[A|F],O,O,OM,OM) :-
        ground(A).
gen_fil(online,A,G,[Var|G],F,F,O,[A|O],OM,[Var|OM]).
gen_fil(dynamic,_,G,[A|G],F,[A|F],O,O,OM,OM).
gen_fil(nonvar,A,GIn,[G|GIn],FIn,FOut,O,O,OM,OM) :-
        functor(A,Func,Arity),
        functor(G,Func,Arity),
        G=..[Func|FArgs],
        reverse(FArgs,RFArgs),
        append(FIn,RFArgs,FOut).
gen_fil(struct(Func,TArgs),A,GIn,[G|GIn],FIn,FOut,OIn,OOut,OMIn,OMOut) :-
        nonvar(A),
        A=..[Func|Args],
        l_gen_fil(TArgs,Args,[],GArgs1,FIn,FOut1,OIn,OOut1,OMIn,OMOut1),
        reverse(FOut1,FOut),
        reverse(GArgs1,GArgs),
        reverse(OOut1,OOut),
        reverse(OMOut1,OMOut),
        G=..[Func|GArgs].
gen_fil((type T),A,GI,GO,FI,FO,OIn,OOut,OMIn,OMOut) :-
        typedef(T,Def),
        gen_fil(Def,A,GI,GO,FI,FO,OIn,OOut,OMIn,OMOut).
gen_fil((T1;_T2),A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut) :-
        gen_fil(T1,A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut).
gen_fil((_T1;T2),A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut) :-
        gen_fil(T2,A,GIn,GOut,FIn,FOut,OIn,OOut,OMIn,OMOut).
gen_fil(list(T),A,GI,GO,FI,FO,OIn,OOut,OMIn,OMOut) :-
        format(user,[42,42,42,32,84,121,112,101,32,108,105,115,116,40,126,119,41,32,100,101,112,114,101,99,97,116,101,100,46,126,110,85,115,101,32,116,121,112,101,40,108,105,115,116,40,126,119,41,41,32,105,110,115,116,101,97,100,46,126,110],[T,T]),
        gen_fil((type list(T)),A,GI,GO,FI,FO,OIn,OOut,OMIn,OMOut).
gen_fil(T,_,G,[A|G],F,[A|F],O,O,OM,OM) :-
        \+legal_binding_type_construct(T),
        format(user,[42,42,42,32,73,108,108,101,103,97,108,32,98,105,110,100,105,110,103,32,116,121,112,101,58,32,126,119,46,126,110,42,42,42,32,65,115,115,117,109,105,110,103,32,100,121,110,97,109,105,99,46,126,110],[T]).
legal_binding_type_construct(X) :-
        basic_binding_type(X).
legal_binding_type_construct(struct(X,_List)) :-
        ground(X).
legal_binding_type_construct((type T)) :-
        typedef(T,_).
legal_binding_type_construct((_T1;_T2)).
legal_binding_type_construct(list(_)).
basic_binding_type(static).
basic_binding_type(dynamic).
basic_binding_type(nonvar).
basic_binding_type(online).
basic_binding_type(static_nf).
:- dynamic
        usertypedef/2.
typedef(list(T),(struct([],[]);struct('.',[T,(type list(T))]))).
typedef(static_or_dynamic,(static;dynamic)).
typedef(T,Def) :-
        usertypedef(T,Def).
gensym(H,NewHead) :-
        (   gx_data(sym,Sym) ->
            NewSym is Sym+1,
            retract(gx_data(sym,Sym))
        ;   NewSym=0
        ),
        assert(gx_data(sym,NewSym)),
        add_id(H,NewSym,NewHead).
add_id(H,Sym,NH) :-
        atom_concat(H,'__',H1),
        name(H1,H1S),
        name(Sym,SymS),
        append(H1S,SymS,NHS),
        name(NH,NHS).
same_length([],[]).
same_length([_|T],[_|T2]) :-
        same_length(T,T2).
print_program_point_and_filter_error(Message,ErrType,Problem,Info,PP,FilterPP2) :-
        write(user_error,pp_filter_err(Problem,PP,FilterPP2)),
        nl(user_error),
        convert_program_point_term(PP,PPT,OtherTags1), !,
        convert_filter_term(FilterPP2,OtherTags2),
        append(OtherTags2,Info,Rest1),
        append(OtherTags1,Rest1,Rest2),
        (   reportgen(user_error,error([message(Message),(type ErrType),problem(Problem),PPT|Rest2])) ->
            true
        ;   write(user_error,' *** reportgen failed ***')
        ),
        flush_output(user_error).
print_program_point_error(Message,ErrType,Problem,Info,PP) :-
        convert_program_point_term(PP,PPT,OtherTags), !,
        append(OtherTags,Info,Rest),
        (   reportgen(user_error,error([message(Message),(type ErrType),problem(Problem),PPT|Rest])) ->
            true
        ;   write(user_error,' *** reportgen failed ***')
        ),
        flush_output(user_error).
print_program_point_error(Message,ErrType,Problem,Info,PP) :-
        write(user_error,'Could not convert PP to term'),
        nl(user_error),
        write(user_error,Message),
        nl(user_error),
        write(user_error,ErrType),
        nl(user_error),
        write(user_error,Problem),
        nl(user_error),
        write(user_error,Info),
        nl(user_error),
        write(user_error,PP),
        nl(user_error).
print_filter_error(Message,ErrType,Problem,Info,PP) :-
        convert_filter_term(PP,OtherTags), !,
        append(OtherTags,Info,Rest),
        (   reportgen(user_error,error([message(Message),(type ErrType),problem(Problem)|Rest])) ->
            true
        ;   write(user_error,' *** reportgen failed ***')
        ),
        flush_output(user_error).
print_filter_error(Message,ErrType,Problem,Info,PP) :-
        write(user_error,'Could not convert Filter to term'),
        nl(user_error),
        write(user_error,Message),
        nl(user_error),
        write(user_error,ErrType),
        nl(user_error),
        write(user_error,Problem),
        nl(user_error),
        write(user_error,Info),
        nl(user_error),
        write(user_error,PP),
        nl(user_error).
print_program_point(PP) :-
        convert_program_point_term(PP,T,_),
        reportgen(user_error,T).
abort_specialization :-
        write(user_error,'*** ABORTING SPECIALIZATION ***'),
        nl(user),
        halt(1).
convert_filter_term(correctfilt(Corr,PP),[(filter[correctfilt(Corr)|OtherFilterTags])]) :- !,
        getfiltert(PP,OtherFilterTags).
convert_filter_term(PP,[(filter OtherFilterTags)]) :-
        getfiltert(PP,OtherFilterTags).
getfiltert(filter(Pred,Arity),[predicate([arity(Arity)],Pred)]) :- !.
getfiltert(X,_) :-
        write(user_error,unknown_filter_term(X)),
        nl(user_error),
        fail.
convert_program_point_term(PP,programpoint(List),OtherTags) :-
        getppt(PP,List,OtherTags).
getppt(correctann(Corr,PP),[correctann(Corr)|PPRes],Rest) :-
        getppt(PP,PPRes,Rest).
getppt(correctfiltpp(Corr,FilterT,PP),PPRes,[(filter[correctfilt(Corr)|OtherFilterTags])|Rest]) :-
        getppt(PP,PPRes,Rest),
        getfiltert(FilterT,OtherFilterTags).
getppt(unfold(Call,PP),[annotation(unfold),call(Call),path(Path)|RestPP],[]) :- !,
        getppt2(PP,Path,RestPP).
getppt(memo(Call,PP),[annotation(memo),call(Call),path(Path)|RestPP],[]) :- !,
        getppt2(PP,Path,RestPP).
getppt(call(Call,PP),[annotation(call),call(Call),path(Path)|RestPP],[]) :- !,
        getppt2(PP,Path,RestPP).
getppt(propagates_bindings(Call,PP),[call(Call),path(Path)|Rest],[]) :- !,
        getppt2(PP,Path,Rest).
getppt(propagated_onto(Call,PP),[call(Call),path(Path)|Rest],[]) :- !,
        getppt2(PP,Path,Rest).
getppt(X,_,_) :-
        write(user_error,unknown_ppt(X)),
        nl(user_error),
        fail.
getppt2(clause(GlobalNr,Pred,Arity,Local),[],[globalclause(GlobalNr),predicate([arity(Arity)],Pred),localclause(Local)]) :- !.
getppt2(ann(Ann,Nr,PP),FullPath,Rest) :- !,
        getppt2(PP,Path,Rest),
        append(Path,[point([arg(Nr)],Ann)],FullPath).
getppt2(PP,[],unknown(PP)) :-
        write(user_error,unknown_program_point(PP)),
        nl(user_error).
reportgen(S,Tag) :-
        rgen(S,Tag,0).
indent(_,0) :- !.
indent(S,X) :-
        X2 is X-1,
        write(S,' '),
        indent(S,X2).
rgen(S,Tag,Indent) :-
        indent(S,Indent),
        Tag=..[H|Args],
        write(S,H),
        rgen_args(S,Args,Indent).
rgen_args(S,[A],Indent) :-
        is_list(A), !,
        write(S,:),
        nl(S),
        Indent2 is Indent+2,
        rgen_list(S,A,Indent2).
rgen_args(S,[A],_) :-
        format(S,': ~w~n',[A]).
rgen_args(S,[Attrs,A],Indent) :-
        is_list(A), !,
        write(S,' ('),
        rgen_attrs(S,Attrs),
        write(S,'):'),
        nl(S),
        Indent2 is Indent+2,
        rgen_list(S,A,Indent2).
rgen_args(S,[Attrs,A],_) :-
        write(S,' ('),
        rgen_attrs(S,Attrs),
        format(S,'): ~w~n',[A]).
rgen_list(_,[],_).
rgen_list(S,[A|As],Indent) :-
        rgen(S,A,Indent),
        rgen_list(S,As,Indent).
rgen_attrs(_,[]).
rgen_attrs(S,[A]) :-
        A=..[L,R],
        format(S,'~w ~w',[L,R]).
rgen_attrs(S,[A|As]) :-
        A=..[L,R],
        format(S,'~w ~w ',[L,R]),
        rgen_attrs(S,As).
is_list(X) :-
        var(X), !,
        fail.
is_list([]).
is_list([_|_]).
build_unfold_call(Call,SpecCode,LogenData,UnfoldCall) :-
        Call=..[Func|Args],
        atom_concat(Func,'_u',NewFunc),
        append(Args,[SpecCode,LogenData],NewArgs),
        UnfoldCall=..[NewFunc|NewArgs].
build_request_call(Call,Req,ResCall,LogenData,RequestCall) :-
        Call=..[Func|Args],
        atom_concat(Func,'_m',NewFunc),
        append(Args,[Req,ResCall,LogenData],NewArgs),
        RequestCall=..[NewFunc|NewArgs].
spec_data(no_post_unfold,true).
spec_data(_,_) :-
        fail.
:- dynamic
        memo_table/4.
:- dynamic
        multiple_use/2.
:- dynamic
        spec_clause/2.
:-use_module(library(terms)).
:-use_module(library(terms_check)).
find_pattern(ID,Call,ResCall,_Requestor) :-
        copy_term(Call,CallCopy),
        memo_table(ID,Call,ResCall,_MEMODATA),
        variant(CallCopy,Call),
        functor(ResCall,F,N),
        (   multiple_use(F,N) ->
            true
        ;   assert(multiple_use(F,N))
        ).
find_variant_pattern(ID,Call,ResCall,_Requestor) :-
        copy_term(Call,CallCopy),
        memo_table(ID,Call,ResCall,_MEMODATA),
        variant(CallCopy,Call),
        memo_table(ID,Call2,_,_),
        variant(Call,Call2),
        functor(ResCall,F,N),
        (   multiple_use(F,N) ->
            true
        ;   assert(multiple_use(F,N))
        ).
insert_pattern(ID,GCall,FCall,MEMODATA) :-
        assert(memo_table(ID,GCall,FCall,MEMODATA)).
update_status(ID,GCall,FCall,Req) :-
        retract(memo_table(ID,GCall,FCall,MEMODATA)),
        get_memodata_requestor(MEMODATA,pending(Req)),
        set_memodata_requestor(MEMODATA,Req,MEMODATAPRIME),
        assert(memo_table(ID,GCall,FCall,MEMODATAPRIME)).
spec_driver :-
        memo_table(ID,GCall,FCall,[pending(Req)|_MEMODATA]),
        update_status(ID,GCall,FCall,Req), !,
        generate_code(GCall,FCall),
        spec_driver.
spec_driver.
:- dynamic
        failing/3,
        deterministic/3.
generate_code(Call,ResCall) :-
        (   spec_data(debug_mode,true) ->
            format(user,[83,112,101,99,105,97,108,105,122,105,110,103,58,32,126,119,32,60,45,62,32,126,119,126,110],[Call,ResCall])
        ;   true
        ),
        copy_term((Call,ResCall),(CCall,CResCall)),
        build_unfold_call(Call,Res,[[CCall],CResCall],UnfoldCall),
        findall((ResCall:-FRes),(UnfoldCall,flatten(Res,FRes)),Clauses),
        functor(ResCall,F,N),
        (   Clauses=[] ->
            assert(failing(ResCall,F,N)),
            save_clauses([(ResCall:-fail)])
        ;   (   Clauses=[_] ->
                assert(deterministic(ResCall,F,N))
            ;   true
            ),
            save_clauses(Clauses)
        ),
        (   spec_data(debug_mode_full,true) ->
            format(user,[70,105,110,105,115,104,101,100,32,83,112,101,99,105,97,108,105,122,105,110,103,58,32,126,119,32,60,45,62,32,126,119,126,110],[Call,ResCall])
        ;   true
        ).
save_clauses([]).
save_clauses([C|Cs]) :-
        (   C=(Head:-_Body) ->
            true
        ;   Head=C
        ),
        assert(spec_clause(Head,C)),
        save_clauses(Cs).
print_memo_table(S) :-
        memo_table(A,B,C,D),
        format(S,[47,42,32,126,119,46,32,42,47,126,110],[memo_table(A,B,C,D)]),
        fail.
print_memo_table(_).
print_clauses(S) :-
        spec_data(declaration,Decl),
        portray_clause(S,(:-Decl)),
        fail.
print_clauses(_) :-
        logen_entry_point(ResCall,_),
        print('/* '),
        print(entry(ResCall)),
        print(*/),
        nl,
        fail.
print_clauses(S) :-
        memo_table(_ID,Orig,Head,_),
        copy_term([Orig,Head],Copy),
        prettyvars(Copy),
        (   predicate_required(Head) ->
            format(S,[126,110,47,42,32,32,126,113,32,58,45,32,126,113,46,32,42,47,126,110],Copy)
        ;   true
        ),
        spec_clause(Head,C),
        (   spec_data(no_post_unfold,true) ->
            PC=C
        ;   post_unfold(C,PC)
        ),
        portray_clause(S,PC),
        fail.
print_clauses(S) :-
        (   gx_error(_) ->
            write(S,'/* ------------------------------------------ */'),
            nl(S),
            write(S,'/* Error(s) occurred during specialization !! */'),
            nl(S),
            write(S,'/* ------------------------------------------ */'),
            nl(S)
        ;   true
        ).
predicate_required(H) :-
        functor(H,F,N),
        functor(CH,F,N),
        predicate_required2(CH,F,N), !.
predicate_required(H) :-
        \+spec_data(aggressive_post_unfold,true),
        H=..[_F|Args],
        nonvar_or_nonlinear_arg(Args,[]).
predicate_required2(CH,_,_) :-
        logen_entry_point(CH,_).
predicate_required2(CH,_,_) :-
        \+deterministic(CH,_,_).
predicate_required2(_,F,N) :-
        multiple_use(F,N).
post_unfold((H:-B),(H:-PB)) :-
        predicate_required(H), !,
        post_unfold_body(B,PB).
nonvar_or_nonlinear_arg([H|T],PrevVars) :-
        (   nonvar(H) ->
            true
        ;   my_exact_member(H,PrevVars) ->
            true
        ;   nonvar_or_nonlinear_arg(T,[H|PrevVars])
        ).
my_exact_member(X,[Y|T]) :-
        (   X==Y ->
            true
        ;   my_exact_member(X,T)
        ).
post_unfold_body((A,B),(PA,PB)) :- !,
        post_unfold_body(A,PA),
        post_unfold_body(B,PB).
post_unfold_body((A;B),(PA;PB)) :- !,
        post_unfold_body(A,PA),
        post_unfold_body(B,PB).
post_unfold_body((A->B),(PA->PB)) :- !,
        post_unfold_body(A,PA),
        post_unfold_body(B,PB).
post_unfold_body(+A,+PA) :- !,
        post_unfold_body(A,PA).
post_unfold_body(Call,Res) :-
        deterministic(Call,F,N),
        \+multiple_use(F,N),
        (   spec_data(aggressive_post_unfold,true) ->
            true
        ;   copy_term(Call,CC),
            numbervars(CC,1,_),
            spec_clause(CC,_)
        ),
        spec_clause(Call,Clause), !,
        (   Clause=(Call:-Body) ->
            post_unfold_body(Body,Res)
        ;   Res=true
        ).
post_unfold_body(X,X).
:- dynamic
        logen_entry_point/2.
add_entry_point(ResCall,OrigCall) :-
        assert(logen_entry_point(ResCall,OrigCall)).
:- dynamic
        gx_error/1.
:- dynamic
        gx_warning/1.
add_gx_error(Err) :-
        assert(gx_error(Err)).
add_gx_error(Err) :-
        assert(gx_warning(Err)).
get_logendata_id([_,ID|_LogenData],ID).
set_logendata_id(ID,[H,_OLDID|LogenData],[H,ID|LogenData]) :- !.
set_logendata_id(H,LD,LD2) :-
        write(user_error,failed_set_logendata_id(H,LD,LD2)),
        nl(user_error),
        LD2=LD.
get_logendata_history([History|_LogenData],History).
set_logendata_history(History,[_|LogenData],[CHistory|LogenData]) :-
        copy_term(History,CHistory), !.
set_logendata_history(H,LD,LD2) :-
        write(user_error,failed_set_logendata_history(H,LD,LD2)),
        nl(user_error),
        LD2=LD.
tab_logendata_history([Hist|_],Stream,String) :-
        tab2(Hist,Stream,String).
tab2(X,_,_) :-
        var(X), !.
tab2([],_Stream,_String).
tab2([_|T],Stream,String) :-
        write(Stream,String),
        tab2(T,Stream,String).
set_logendata_pp(PP,[H,ID,_|_LDTAIL],[H,ID,PP|_LDTAIL]) :- !.
set_logendata_pp(PP,[H,ID],[H,ID,PP]) :- !.
set_logendata_pp(H,LD,LD2) :-
        write(user_error,failed_set_logendata_pp(H,LD,LD2)),
        nl(user_error),
        LD2=LD.
get_logendata_pp([_,_,PP|_LogenData],PP).
get_memodata_requestor([REQ|_MEMODATA],REQ).
set_memodata_requestor([_OLD|MEMODATA],Req,[Req|MEMODATA]).
get_memodata_id([_Req,ID|_MEMODATA],ID).
set_memodata_id([Req,_|MEMODATA],ID,[Req,ID,MEMODATA]).
init_memodata(Requestor,Parent,[Requestor,Parent]).
go_m(A,Requestor,ResidualCall,__LOGENDATA) :-
        (   generalise_call([[static]],go(A),GenCall) ->
            (   find_pattern(default,go(A),ResidualCall,Requestor) ->
                true
            ;   __LOGENDATA=[_,ParentID|_],
                filter_call([[static]],go(A),GenCall,ResidualCall),
                true,
                true,
                init_memodata(pending(Requestor),ParentID,B),
                insert_pattern(default,GenCall,ResidualCall,B)
            ),
            GenCall=go(A)
        ;   format(user_error,[126,110,60,124,32,70,73,76,84,69,82,32,69,82,82,79,82,32,124,62,32,58,32,77,69,77,79,32,65,116,111,109,32,126,119,126,110],[go(A)]),
            (   get_uncovered_correction([[static]],go(A),C) ->
                D=correctfilt(C,filter(go,1))
            ;   D=filter(go,1)
            ),
            print_filter_error('A memoised call is not covered by its filter declaration and could not be specialized.',error,filter,[call(go(A))],D),
            abort_specialization
        ).
solve_m(A,B,C,Requestor,ResidualCall,__LOGENDATA) :-
        (   generalise_call([[(type stack),static,static]],solve(A,B,C),GenCall) ->
            (   find_pattern(default,solve(A,B,C),ResidualCall,Requestor) ->
                true
            ;   __LOGENDATA=[_,ParentID|_],
                filter_call([[(type stack),static,static]],solve(A,B,C),GenCall,ResidualCall),
                true,
                true,
                init_memodata(pending(Requestor),ParentID,D),
                insert_pattern(default,GenCall,ResidualCall,D)
            ),
            GenCall=solve(A,B,C)
        ;   format(user_error,[126,110,60,124,32,70,73,76,84,69,82,32,69,82,82,79,82,32,124,62,32,58,32,77,69,77,79,32,65,116,111,109,32,126,119,126,110],[solve(A,B,C)]),
            (   get_uncovered_correction([[(type stack),static,static]],solve(A,B,C),E) ->
                F=correctfilt(E,filter(solve,3))
            ;   F=filter(solve,3)
            ),
            print_filter_error('A memoised call is not covered by its filter declaration and could not be specialized.',error,filter,[call(solve(A,B,C))],F),
            abort_specialization
        ).
hornClause_u('false(1)',[A<B+1],['r7(1)'(_,_,A,B)],true,__LOGENDATA).
hornClause_u('false(0)',[A<B+1],['r7(0)'(_,_,A,B)],true,__LOGENDATA).
hornClause_u('false(1)',[A>B+1],['r7(1)'(_,_,A,B)],true,__LOGENDATA).
hornClause_u('false(0)',[A>B+1],['r7(0)'(_,_,A,B)],true,__LOGENDATA).
hornClause_u('r8(1)',[A=B+1,A=_,B=_],['r7(1)'(_,_,A,B)],true,__LOGENDATA).
hornClause_u('r8(0)',[A=B+1,A=_,B=_],['r7(0)'(_,_,A,B)],true,__LOGENDATA).
hornClause_u('r6(1)'(A,B,C,D),[D>=0,E=C],['r5(1)'(A,B,E,_)],true,__LOGENDATA).
hornClause_u('r6(0)'(A,_,B,C),[1*C>=0,1*A+ -1*B=0],[],true,__LOGENDATA).
hornClause_u('r5(0)'(A,B,C,D),[1*A+ -1*C=0,1*B+ -1*D=0],[],true,__LOGENDATA).
hornClause_u('r4(1)'(A,B,C,D),[C=1,E=D,F=_],['r2(1)'(A,B,_,_,E,F)],true,__LOGENDATA).
hornClause_u('r4(0)'(A,B,C,D),[C=1,E=D,F=_],['r2(0)'(A,B,_,_,E,F)],true,__LOGENDATA).
hornClause_u('r4(1)'(A,B,C,D),[C=E+1,F=D,E=_],['r3(1)'(A,B,_,_,F,E)],true,__LOGENDATA).
hornClause_u('r4(0)'(A,B,C,D),[C=E+1,F=D,E=_],['r3(0)'(A,B,_,_,F,E)],true,__LOGENDATA).
hornClause_u('r2(1)'(A,B,C,D,E,F),[G=<0,H=D,G=E,I=F],['r0(1)'(A,B,C,H,G,I)],true,__LOGENDATA).
hornClause_u('r2(0)'(A,B,C,D,E,F),[G=<0,H=D,G=E,I=F],['r0(0)'(A,B,C,H,G,I)],true,__LOGENDATA).
hornClause_u('r1(1)'(A,B,C,D,E,F),[G>0,H=D,G=E,I=F],['r0(1)'(A,B,C,H,G,I)],true,__LOGENDATA).
hornClause_u('r1(0)'(A,B,C,D,E,F),[G>0,H=D,G=E,I=F],['r0(0)'(A,B,C,H,G,I)],true,__LOGENDATA).
hornClause_u('r3(1)'(A,B,C,D,E,F),[G=H-1,I=F,J=D,H=E],['r1(1)'(A,B,C,J,H,_),'r4[0]'(_,G,I,_)],true,__LOGENDATA).
hornClause_u('r3(1)'(A,B,C,D,E,F),[G=H-1,I=F,J=D,H=E],['r1[0]'(A,B,C,J,H,_),'r4(1)'(_,G,I,_)],true,__LOGENDATA).
hornClause_u('r3(1)'(A,B,C,D,E,F),[G=H-1,I=F,J=D,H=E],['r1(0)'(A,B,C,J,H,_),'r4(0)'(_,G,I,_)],true,__LOGENDATA).
hornClause_u('r0(1)'(A,B,_,C,D,_),[B=E-1,A=C,B=D],['r1(1)'(_,_,_,_,E,_)],true,__LOGENDATA).
hornClause_u('r0(0)'(A,B,_,C,D,_),[B=E-1,A=C,B=D],['r1(0)'(_,_,_,_,E,_)],true,__LOGENDATA).
hornClause_u('r7(1)'(A,B,C,D),[E=F,G=C,F=D],['r6(1)'(A,B,_,F),'r4[0]'(_,E,G,_)],true,__LOGENDATA).
hornClause_u('r7(1)'(A,B,C,D),[E=F,G=C,F=D],['r6[0]'(A,B,_,F),'r4(1)'(_,E,G,_)],true,__LOGENDATA).
hornClause_u('r7(1)'(A,B,C,D),[E=F,G=C,F=D],['r6(0)'(A,B,_,F),'r4(0)'(_,E,G,_)],true,__LOGENDATA).
hornClause_u('r0(1)'(A,B,_,C,D,_),[B=E,A=C,B=D],['r6(1)'(_,_,_,E)],true,__LOGENDATA).
hornClause_u('r0(0)'(A,B,_,C,D,_),[B=E,A=C,B=D],['r6(0)'(_,_,_,E)],true,__LOGENDATA).
hornClause_u('false[1]',[],['false(1)'],true,__LOGENDATA).
hornClause_u('false[1]',[],['false(0)'],true,__LOGENDATA).
hornClause_u('false[0]',[],['false(0)'],true,__LOGENDATA).
hornClause_u('r0[1]'(A,B,C,D,E,F),[],['r0(1)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r0[1]'(A,B,C,D,E,F),[],['r0(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r0[0]'(A,B,C,D,E,F),[],['r0(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r1[1]'(A,B,C,D,E,F),[],['r1(1)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r1[1]'(A,B,C,D,E,F),[],['r1(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r1[0]'(A,B,C,D,E,F),[],['r1(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r2[1]'(A,B,C,D,E,F),[],['r2(1)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r2[1]'(A,B,C,D,E,F),[],['r2(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r2[0]'(A,B,C,D,E,F),[],['r2(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r3[1]'(A,B,C,D,E,F),[],['r3(1)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r3[1]'(A,B,C,D,E,F),[],['r3(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r3[0]'(A,B,C,D,E,F),[],['r3(0)'(A,B,C,D,E,F)],true,__LOGENDATA).
hornClause_u('r4[1]'(A,B,C,D),[],['r4(1)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r4[1]'(A,B,C,D),[],['r4(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r4[0]'(A,B,C,D),[],['r4(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r5[1]'(A,B,C,D),[],['r5(1)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r5[1]'(A,B,C,D),[],['r5(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r5[0]'(A,B,C,D),[],['r5(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r6[1]'(A,B,C,D),[],['r6(1)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r6[1]'(A,B,C,D),[],['r6(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r6[0]'(A,B,C,D),[],['r6(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r7[1]'(A,B,C,D),[],['r7(1)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r7[1]'(A,B,C,D),[],['r7(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r7[0]'(A,B,C,D),[],['r7(0)'(A,B,C,D)],true,__LOGENDATA).
hornClause_u('r8[1]',[],['r8(1)'],true,__LOGENDATA).
hornClause_u('r8[1]',[],['r8(0)'],true,__LOGENDATA).
hornClause_u('r8[0]',[],['r8(0)'],true,__LOGENDATA).
go_u(A,(B,C),__LOGENDATA) :-
        getAtom_u(D,B,__LOGENDATA),
        solve_m([D],A,1,internal,C,__LOGENDATA).
solve_u([C|D],A,B,(E,F,G,H,I,J),__LOGENDATA) :-
        hornClause_u(C,K,L,E,__LOGENDATA),
        solveConstraints_u(K,F,__LOGENDATA),
        length_u(L,M,G,__LOGENDATA),
        N is M+B-1,
        N=<A,
        perm_u(L,O,H,__LOGENDATA),
        append_u(O,D,P,I,__LOGENDATA),
        solve_m(P,A,N,internal,J,__LOGENDATA).
solve_u([],_,_,true,__LOGENDATA).
solveConstraints_u([],true,__LOGENDATA).
solveConstraints_u([A|B],(call(A),C),__LOGENDATA) :-
        solveConstraints_u(B,C,__LOGENDATA).
length_u([],0,true,__LOGENDATA).
length_u([_|C],A,B,__LOGENDATA) :-
        length_u(C,D,B,__LOGENDATA),
        A is D+1.
append_u([],A,A,true,__LOGENDATA).
append_u([C|D],A,[C|E],B,__LOGENDATA) :-
        append_u(D,A,E,B,__LOGENDATA).
select_u(A,[A|B],B,true,__LOGENDATA).
select_u(A,[C|D],[C|E],B,__LOGENDATA) :-
        select_u(A,D,E,B,__LOGENDATA).
perm_u([],[],true,__LOGENDATA).
perm_u(A,[B|C],(D,E),__LOGENDATA) :-
        select_u(B,A,F,D,__LOGENDATA),
        perm_u(F,C,E,__LOGENDATA).
getAtom_u(A,B,__LOGENDATA) :-
        hornClause_u(C,_,_,B,__LOGENDATA),
        functor(C,D,E),
        functor(A,D,E).
read_from_chars(String,Term) :-
        mktemp('/tmp/readatomXXXXXX',TmpFile),
        open(TmpFile,write,TmpOut),
        display(TmpOut,String),
        display(TmpOut,' .\n'),
        close(TmpOut),
        open(TmpFile,read,TmpIn),
        read(TmpIn,Term),
        close(TmpIn),
        delete_file(TmpFile).
print_usage :-
        usage(Msg),
        print(user_error,Msg),
        nl,
        print(user_error,'  Possible Options are:'),
        nl,
        print_options.
print_options :-
        recognised_option(Opt,_,Args,Msg),
        print(user_error,'      '),
        print(user_error,Opt),
        print_option_args(Args,1),
        print(user_error,': '),
        print(user_error,Msg),
        nl,
        fail.
print_options.
print_option_args([],_).
print_option_args([_|T],N) :-
        print(user_error,' ARG'),
        print(user_error,N),
        N1 is N+1,
        print_option_args(T,N1).
get_options([],[],[]).
get_options([X|T],Options,OtherArgs) :-
        (   recognised_option(X,Opt,Values,_) ->
            append(Values,Rest,T),
            RT=Rest,
            Options=[Opt|OT],
            OtherArgs=AT
        ;   Options=OT,
            OtherArgs=[X|AT],
            RT=T
        ),
        get_options(RT,OT,AT).
usage('Usage: gxfile [Options] "Atom."').
recognised_option('--help',help,[],'Prints this message').
recognised_option('-o',outfile(Out),[Out],'Specialised filename').
recognised_option('--add_entry',add_entry,[],'Generate entry point').
default_entry(Goal,ResCall,Opts) :-
        (   member(outfile(A),Opts) ->
            open(A,write,B)
        ;   B=user
        ),
        statistics(runtime,[C,_]),
        mnf(build_request_call(Goal,crossmodule,ResCall,[[],entry],REQ)),
        REQ,
        add_entry_point(ResCall,Goal),
        mnf(spec_driver),
        true,
        mnf(print_clauses(B)),
        statistics(runtime,[D,_]),
        E is D-C,
        format(user,[126,78,47,42,32,83,112,101,99,105,97,108,105,115,97,116,105,111,110,32,116,105,109,101,32,126,119,32,109,115,32,40,114,117,110,116,105,109,101,41,32,42,47,126,110],[E]),
        (   member(add_entry,Opts) ->
            portray_clause(B,(Goal:-ResCall))
        ;   true
        ),
        close(B).
main(A) :-
        main_gx(A).
main(A) :-
        format(user,[42,42,42,32,69,114,114,111,114,33,126,110,42,42,42,32,67,111,109,109,97,110,100,32,76,105,110,101,32,65,114,103,117,109,101,110,116,115,58,39,126,119,39,126,110],[A]),
        print_usage.
main_gx(A) :-
        get_options(A,Opts,B),
        (   member(help,Opts) ->
            print_usage
        ;   B=[AtomGoal|_] ->
            (   read_from_chars(AtomGoal,Goal) ->
                (   catch(default_entry(Goal,_Res,Opts),C,(functor(Goal,D,E),(C=error(existence_error(_,_),_)->format(user_error,[126,110,42,42,42,32,69,120,105,115,116,101,110,99,101,32,69,120,99,101,112,116,105,111,110,32,100,117,114,105,110,103,32,83,112,101,99,105,97,108,105,115,97,116,105,111,110,32,111,102,32,113,117,101,114,121,58,32,39,126,119,39,46,126,110,42,42,42,32,89,111,117,32,109,97,121,32,110,101,101,100,32,116,111,32,97,100,100,32,97,32,102,105,108,116,101,114,32,100,101,99,108,97,114,97,116,105,111,110,32,102,111,114,32,126,119,47,126,119,46,126,110,42,42,42,32,126,119,126,110],[AtomGoal,D,E,C]);format(user_error,[42,42,42,32,69,120,99,101,112,116,105,111,110,32,79,99,99,117,114,101,100,32,100,117,114,105,110,103,32,83,112,101,99,105,97,108,105,115,97,116,105,111,110,32,111,102,32,39,126,119,39,46,126,110,42,42,42,32,126,119,126,110],[AtomGoal,C])),halt(1))) ->
                    true
                ;   format(user_error,[42,42,42,32,83,112,101,99,105,97,108,105,115,97,116,105,111,110,32,102,97,105,108,101,100,32,102,111,114,58,32,39,126,119,39,46,126,110,67,97,108,108,32,69,110,116,114,121,58,32,39,126,119,39,46,126,110],[Goal,default_entry(Goal,_Res,Opts)]),
                    halt(1)
                ),
                count_errors_occured(F),
                (   F>0 ->
                    format(user,[126,110,42,42,42,32,126,119,32,101,114,114,111,114,115,32,111,99,99,117,114,114,101,100,32,33,126,110],[F]),
                    halt(1)
                ;   true
                )
            ;   format(user_error,[42,42,42,32,69,114,114,111,114,58,32,67,111,117,108,100,32,110,111,116,32,114,101,97,100,95,102,114,111,109,95,99,104,97,114,115,58,32,39,126,119,39,126,110],[AtomGoal]),
                fail
            )
        ;   format(user_error,[42,42,42,32,69,114,114,111,114,58,32,78,111,32,97,116,111,109,32,116,111,32,115,112,101,99,105,97,108,105,115,101,32,112,114,111,118,105,100,101,100,32,111,110,32,99,111,109,109,97,110,100,45,108,105,110,101,46,126,110],[]),
            fail
        ).
usertypedef(stack,(type list(nonvar))).
